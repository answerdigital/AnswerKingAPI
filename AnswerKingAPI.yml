openapi: 3.0.1
info:
  title: Answer King API
  version: v1
tags:
  - name: Inventory
    description: Manage the inventory.
  - name: Orders
    description: Create and manage customer orders.
  - name: Tags
    description: Create and manage tags.
paths:
  /api/tags:
    post:
      tags:
        - Tags
      summary: Create a new tag.
      operationId: createNewTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag.Request'
      responses:
        '201':
          description: Tag created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag.Response'
        '400':
          description: Invalid parameters are provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Product with the given id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '410':
          description: Product with the given id is retired.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'                 
    get:
      tags:
        - Tags
      summary: Get all tags.
      operationId: getAllTags
      responses:
        '200':
          description: 'All the tags have been returned.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag.Response'
  /api/tags/{id}:
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      tags:
        - Tags
      summary: Get a single tag.
      operationId: getTag
      responses:
        '200':
          description: Tag with the provided id has been found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag.Response'
        '400':
          description: Invalid parameters are provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Tag with the given id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    post:
      tags:
        - Tags
      summary: Unretire a retired Tag.
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '201':
          description: Tag has been unretired.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag.Response'
        '400':
          description: Invalid parameters are provided or Tag is not retired.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Tag does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'                 
    put:
      tags:
        - Tags
      summary: Update an existing tag.
      operationId:  updateTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag.Request'
      responses:
        '200':
          description: Tag has been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag.Response'
        '400':
          description: Invalid parameters are provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Tag with the given id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '410':
          description: Tag or product(s) with the given id is retired.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - Tags
      summary:  Delete an existing tag.
      operationId:  deleteTag
      responses:
        '204':
          description:  No Content
        '400':
          description: Invalid parameters are provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Tag with the given id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '410':
          description: Tag with the given id is already retired.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

  /api/categories:
    get:
      tags:
        - Inventory
      summary: Get all categories.
      responses:
        '200':
          description: All the categories have been returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Inventory.Category.Response'
    post:
      tags:
        - Inventory
      summary: Create a new category.
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category.Request'
          text/json:
            schema:
              $ref: '#/components/schemas/Category.Request'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Category.Request'
      responses:
        '201':
          description: Category has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory.Category.Response'
        '400':
          description: Invalid parameters are provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Product with the given id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '410':
          description: Product with the given id is retired.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'                 
  /api/categories/{id}:
    get:
      tags:
        - Inventory
      summary: Get a single category.
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Category with the provided id has been found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory.Category.Response'
        '400':
          description: Invalid parameters are provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Category with the given id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    post:
      tags:
        - Inventory
      summary: Unretire a retired category.
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '201':
          description: Category has been unretired.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory.Category.Response'
        '400':
          description: Invalid parameters are provided or Category is not retired.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Category does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'                
    put:
      tags:
        - Inventory
      summary: Update an existing category.
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category.Request'
          text/json:
            schema:
              $ref: '#/components/schemas/Category.Request'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Category.Request'
      responses:
        '200':
          description: Category has been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory.Category.Response'
        '400':
          description: Invalid parameters are provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Category or Products with the given id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '410':
          description: Category or Product(s) with the given id is retired.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - Inventory
      summary: Retire an existing category.
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content.
        '400':
          description: Invalid parameters are provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Category with the given id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '410':
          description: Category with the given id is already retired.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/categories/{id}/products:
    get:
      tags:
        - Inventory
      summary: Get all products in a category.
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: All the products have been returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Inventory.Product.Response'
        '400':
          description: Invalid parameters are provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Category with the given id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/orders:
    get:
      tags:
        - Orders
      summary: Get all orders.
      responses:
        '200':
          description: All the orders have been returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Orders.Order.Response'
    post:
      tags:
        - Orders
      summary: Create a new order.
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order.Request'
          text/json:
            schema:
              $ref: '#/components/schemas/Order.Request'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Order.Request'
      responses:
        '201':
          description: Order has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Orders.Order.Response'
        '400':
          description: Invalid parameters are provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/orders/{id}:
    get:
      tags:
        - Orders
      summary: Get a single order.
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Order with the provided id has been found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Orders.Order.Response'
        '404':
          description: Order with the given id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - Orders
      summary: Update an existing order.
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order.Request'
          text/json:
            schema:
              $ref: '#/components/schemas/Order.Request'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Order.Request'
      responses:
        '200':
          description: Order has been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Orders.Order.Response'
        '400':
          description: Invalid parameters are provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Order or products with the given id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '410':
          description: Product(s) with the given id is retired.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - Orders
      summary: Cancel an existing order.
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content.
        '400':
          description: Invalid parameters are provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Order with the given id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/products:
    get:
      tags:
        - Inventory
      summary: Get all products.
      responses:
        '200':
          description: All products have been returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Inventory.Product.Response'
    post:
      tags:
        - Inventory
      summary: Create a new product.
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product.Request'
          text/json:
            schema:
              $ref: '#/components/schemas/Product.Request'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Product.Request'
      responses:
        '201':
          description: Product has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory.Product.Response'
        '400':
          description: Invalid parameters are provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Category or Tag with the given id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '410':
          description: Category or Tag with the given id is retired.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'                  
  /api/products/{id}:
    get:
      tags:
        - Inventory
      summary: Get a single product.
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Product with the provided id has been found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory.Product.Response'
        '400':
          description: Invalid parameter is provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Product with the given id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    post:
      tags:
        - Inventory
      summary: Unretire a retired Product.
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '201':
          description: Product has been unretired.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory.Product.Response'
        '400':
          description: Invalid parameters are provided or Product is not retired.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Product does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'                
    put:
      tags:
        - Inventory
      summary: Update an existing product.
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product.Request'
          text/json:
            schema:
              $ref: '#/components/schemas/Product.Request'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Product.Request'
      responses:
        '200':
          description: Product has been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory.Product.Response'
        '400':
          description: Invalid parameters are provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Product with the given id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '410':
          description: Product or tag(s) with the given id is retired.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - Inventory
      summary: Retire an existing product.
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content.
        '400':
          description: Invalid parameter is provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Product with the given id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '410':
          description: Product with the given id is already retired.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
components:
  schemas:
    Tag.Request:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        products:
          type: array
          items:
            type: integer
            format: int64
    Tag.Response:
      allOf:
        - $ref: '#/components/schemas/Tag.Request'
      type: object
      properties:
        id:
          type: integer
          format: int64
    Category.Request:
      type: object
      properties:
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        products:
          type: array
          items:
            type: integer
            format: int64
          nullable: true
      additionalProperties: false
    Inventory.SimpleCategory.Response:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
    Inventory.Category.Response:
      allOf:
        - $ref: '#/components/schemas/Inventory.SimpleCategory.Response'
      type: object
      properties:
        createdOn:
          type: string
          format: date-time
          readOnly: true
        lastUpdated:
          type: string
          format: date-time
          readOnly: true
        products:
          type: array
          items:
            type: integer
            format: int64
            readOnly: true
          readOnly: true
        retired:
          type: boolean
          readOnly: true
      additionalProperties: false
    Inventory.Product.Response:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        price:
          type: number
          format: double
        category:
          $ref: '#/components/schemas/Inventory.SimpleCategory.Response'
        retired:
          type: boolean
          readOnly: true
        tagIds:
          type: array
          items:
            type: integer
            format: int64
      additionalProperties: false
    LineItem.Request:
      type: object
      properties:
        productId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
      additionalProperties: false
    Order.Request:
      type: object
      properties:
        lineItems:
          type: array
          items:
            $ref: '#/components/schemas/LineItem.Request'
          nullable: true
      additionalProperties: false
    Orders.LineItem.Response:
      type: object
      properties:
        product:
          $ref: '#/components/schemas/Orders.Product.Response'
        quantity:
          type: integer
          format: int32
          readOnly: true
        subTotal:
          type: number
          format: double
          readOnly: true
      additionalProperties: false
    Orders.Order.Response:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        createdOn:
          type: string
          format: date-time
          readOnly: true
        lastUpdated:
          type: string
          format: date-time
          readOnly: true
        orderStatus:
          $ref: '#/components/schemas/Orders.OrderStatus.Response'
        orderTotal:
          type: number
          format: double
          readOnly: true
        lineItems:
          type: array
          items:
            $ref: '#/components/schemas/Orders.LineItem.Response'
          nullable: true
          readOnly: true
      additionalProperties: false
    Orders.OrderStatus.Response:
      enum:
        - created
        - complete
        - cancelled
      type: string
    Orders.Product.Response:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        price:
          type: number
          format: double
      additionalProperties: false
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          description: "A URI reference [RFC3986] that identifies the problem type. This specification encourages that, when\r\n            dereferenced, it provide human-readable documentation for the problem type\r\n            (e.g., using HTML [W3C.REC-html5-20141028]).  When this member is not present, its value is assumed to be\r\n            'about:blank'."
        title:
          type: string
          description: "A short, human-readable summary of the problem type.It SHOULD NOT change from occurrence to occurrence\r\n            of the problem, except for purposes of localization(e.g., using proactive content negotiation;\r\n            see[RFC7231], Section 3.4)."
        status:
          type: integer
          description: >-
            The HTTP status code([RFC7231], Section 6) generated by the origin
            server for this occurrence of the problem.
          format: int32
        detail:
          type: string
          description: >-
            A human-readable explanation specific to this occurrence of the
            problem.
          nullable: true
        instance:
          type: string
          description: >-
            A URI reference that identifies the specific occurrence of the
            problem. It may or may not yield further information if
            dereferenced.
          nullable: true
        errors:
          description: The validation errors.
          nullable: true
        traceId:
          type: string
          description: A unique identifier to represent this request in trace logs.
      additionalProperties: {}
      example: "{\r\n  \"errors\": {\r\n    \"lineItems\": [\r\n      \"The lineItems field is required.\"\r\n    ]\r\n  },\r\n  \"type\": \"https://tools.ietf.org/html/rfc7231#section-6.5.1\",\r\n  \"title\": \"One or more validation errors occurred.\",\r\n  \"status\": 400,\r\n  \"traceId\": \"00-f40e09a437a87f4ebcd2f39b128bb8f3-4b2ad798ac046140-00\"\r\n}"
    Product.Request:
      type: object
      properties:
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        price:
          type: number
          format: double
        categoryId:
          type: integer
          format: int64
        tagIds:
          type: array
          items:
            type: integer
            format: int64
      additionalProperties: false
